---
title: "Workplace Curiosity:  Merck Data Online Supplement"
subtitle: "Confirmatory Factor Analysis and Means Comparisons"
author: 
  - name: Patrick E. McKnight
    orcid: 0000-0002-9067-9066
    email: pmcknigh@gmu.edu
    affiliation: 
      name: George Mason University
      department: Department of Psychology
    role: "corresponding author - Supplement"
  - name: Todd B. Kashdan
    orcid: 0000-0001-6438-0485
    email: tkashdan@gmu.edu
    affiliation: 
      name: George Mason University
      department: Department of Psychology
    role: "corresponding author - Manuscript"
format: 
  html:
    toc: true
    code-fold: true
  pdf:
    toc: true
    colorlinks: true
  docx:
    reference_docx: "apa6.docx"
    toc: true
    fig_width: 6
    fig_height: 4
    fig_caption: true
    number_sections: true
    highlight: tango
execute:
  freeze: false
---

# Setup libraries

```{r setup}
#| echo: true
#| include: true
#| message: false
#| warning: false
#| error: true
library(tidyverse)
library(lavaan)
library(lavaanPlot)
library(psych)
library(GPArotation)
library(knitr)
library(kableExtra)
library(summarytools)
library(semTools)
library(ggcorrplot)
library(broom)
library(broom.helpers)
library(gtsummary)
library(corrr)
library(ggfortify)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(tidySEM) ## won't install
library(DiagrammeRsvg)
library(rsvg)
library(apaTables)
library(gt)
library(ggthemes)
library(summarytools)

apa <- function(x, title = " ") {
  gt(x) %>%
  tab_options(
    table.border.top.color = "white",
    heading.title.font.size = px(16),
    column_labels.border.top.width = 3,
    column_labels.border.top.color = "black",
    column_labels.border.bottom.width = 3,
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table.border.bottom.color = "white",
    table.width = pct(100),
    table.background.color = "white"
  ) %>%
  cols_align(align="center") %>%
  tab_style(
    style = list(
      cell_borders(
        sides = c("top", "bottom"),
        color = "white",
        weight = px(1)
      ),
      cell_text(
        align="center"
      ),
      cell_fill(color = "white", alpha = NULL)
      ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  ) %>%
    #title setup
    tab_header(
    title = html("<i>", title, "</i>")
  ) %>%
  opt_align_table_header(align = "left")
}

```

:::{.callout-important}
Please ensure that the libraries listed in the code chunk above are all installed prior to running.  RStudio will likely alert you of any uninstalled packages.  Please see the `sessionInfo()` section below for actual versions used to produce the output.
:::

# Data {#data}

The Merck data came with a password. Please contact the authors for access to the data. NOTE: The data are not included in the GitHub repository.  The data are available upon request from the authors.

```{r data}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| cache: true
#| results: "asis"
#| collapse: true
df <- read.csv("Merck_Curiosity_Survey_Data_NO_PWD.csv", header = TRUE)
df.varnames <- read.csv("Merck_Curiosity_Survey_Data_NO_PWD_varnames.csv", header = TRUE)
names(df.varnames) <- c("VarName","Details")
factor.names <- data.frame(VarName = c("ds","je","st","op"), 
                           Details = c("Deprivation Sensitivity", 
                                        "Joyous Exploration", 
                                        "Stress Tolerance", 
                                        "Openness to People's Ideas"))
df.varnames <- rbind(df.varnames,factor.names)
df.varnames$curiosity_factor <- NA
df.varnames$curiosity_factor[2:17] <- c(rep("ds",4),
                                        rep("je",4),
                                        rep("st",4),
                                        rep("op",4))



df.fin <- df %>%
  group_by(Locale) %>%
  filter(n() > 250) %>%
  ungroup()

Locale.dat <- data.frame(group=1:9, location = unique(df.fin$Locale))
df.fin$Locale.f <- as.factor(df.fin$Locale)
df.fin$Age <- as.factor(df.fin$Age.Group) # note the change - shorter variable name
df.fin$Sex <- as.factor(df.fin$Gender) # again, as reported in the paper (sex, not gender)

dfSummary(df.fin[,2:17],
          graph.magnif = .85,
          valid.col = T,
          tmp.img.dir = "tmp",
          style = "grid",
          plain.ascii = F)

```


## Item Details

```{r items}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true

#knitr::kable(df.varnames)

## use kable and change the color of the rows based upon the value of a variable

knitr::kable(df.varnames[c(2:17),], row.names = FALSE, caption = "Table 1.  Workplace Curiosity Scale Items and Factors", align = "c") #%>%
#  row_spec(which(df.varnames$curiosity_factor == "ds"), bold = TRUE, color = "white", background = "green") %>%
#  row_spec(which(df.varnames$curiosity_factor == "je"), bold = TRUE, color = "white", background = "orange") %>%
#  row_spec(which(df.varnames$curiosity_factor == "st"), bold = TRUE, color = "white", background = "red") %>%
#  row_spec(which(df.varnames$curiosity_factor == "op"), bold = TRUE, color = "white", background = "blue")
```

# Missing Data

## Percent of Missing Data by Variable

```{r missing}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true

# Shamelessly grabbed from: 
# https://jenslaufer.com/data/analysis/visualize_missing_values_with_ggplot.html
missing.values <- df.fin %>%
  gather(key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  group_by(key) %>%
  mutate(total = n()) %>%
  group_by(key, total, isna) %>%
  summarise(num.isna = n()) %>%
  mutate(pct = num.isna / total * 100)

levels <-
    (missing.values  %>% filter(isna == T) %>% arrange(desc(pct)))$key

percentage.plot <- missing.values %>%
      ggplot() +
        geom_bar(aes(x = reorder(key, desc(pct)), 
                     y = pct, fill=isna), 
                     stat = 'identity', alpha=0.8) +
        scale_x_discrete(limits = levels) +
        scale_fill_manual(name = "", 
                          values = c('black', 'green'), 
                          labels = c("Present", "Missing")) +
        coord_flip() +
        labs(title = "Percentage of missing values", 
             x = 'Variable', 
             y = "% of missing values")
percentage.plot
## NB: These plots and more are readily available in the `naniar` package.  Please consider changing later.
```

## Missing Data by Row and Variable

```{r missing2}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
row.plot <- df.fin %>%
  mutate(id = row_number()) %>%
  gather(-id, key = "key", value = "val") %>%
  mutate(isna = is.na(val)) %>%
  ggplot(aes(key, id, fill = isna)) +
    geom_raster(alpha=0.8) +
    scale_fill_manual(name = "",
        values = c('black', 'green'),
        labels = c("Present", "Missing")) +
    scale_x_discrete(limits = levels) +
    labs(x = "Variable",
         y = "Row Number", 
         title = "Missing values in rows") +
    coord_flip()
row.plot
```

## Final Sample

```{r finalSample}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
df.fin <- df.fin[,c(1:17,40,42,43)] %>% drop_na()
```

Based upon the observed missingness by both variable and row, we chose to listwise delete incomplete observations.  This missing data handling method resulted in a final sample size `r nrow(df.fin)`.  We now proceed with the confirmatory factor analysis (CFA) of the Workplace Curiosity Scale.

# CFA Models

We tested two theoretically comparable models:

MODEL 1: **Previous Model:** We had a four factor, four item/factor model that we previously found in our original analyses.

```{r PreviousModel}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
Cur.model <- 'ds =~ Q1 + Q2 + Q3 + Q4
              je =~ Q5 + Q6 + Q7 + Q8
              st =~ Q9 + Q10 + Q11 + Q12
              op =~ Q13 + Q14 + Q15 + Q16'
```

```{mermaid}
graph TD
  A[ds] -->|b1| B[Q1]
  A[ds] -->|b2| C[Q2]
  A[ds] -->|b3| D[Q3]
  A[ds] -->|b4| E[Q4]
  F[je] -->|b5| G[Q5]
  F[je] -->|b6| H[Q6]
  F[je] -->|b7| I[Q7]
  F[je] -->|b8| J[Q8]
  K[st] -->|b9| L[Q9]
  K[st] -->|b10| M[Q10]
  K[st] -->|b11| N[Q11]
  K[st] -->|b12| O[Q12]
  P[op] -->|b13| Q[Q13]
  P[op] -->|b14| R[Q14]
  P[op] -->|b15| S[Q15]
  P[op] -->|b16| T[Q16]
```


MODEL 2: **New Model:**. We had a four factor, three item/factor model derived from both confirmatory and exploratory models detailed below.

```{r NewModel}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
New.model <- 'ds =~ Q1 + Q3 + Q4
              je =~ Q6 + Q7 + Q8
              st =~ Q10 + Q11 + Q12
              op =~ Q13 + Q14 + Q15'
```


```{mermaid}
graph TD
  A((ds)) -->|b1| B[Q1]
  A((ds)) -->|b3| D[Q3]
  A((ds)) -->|b4| E[Q4]
  F((je)) -->|b6| H[Q6]
  F((je)) -->|b7| I[Q7]
  F((je)) -->|b8| J[Q8]
  K((st)) -->|b10| M[Q10]
  K((st)) -->|b11| N[Q11]
  K((st)) -->|b12| O[Q12]
  P((op)) -->|b13| Q[Q13]
  P((op)) -->|b14| R[Q14]
  P((op)) -->|b15| S[Q15]
```


Across three types of models:

-   **Configural Invariance:** We tested the configural model to see if the factor structure was the same across the two groups.  
-   **Metric Invariance:** We tested the weak constraints model to see if the factor loadings were the same across the two groups.
-   **Scalar Invariance:** We tested the strong constraints model to see if the factor loadings and intercepts were the same across the two groups.


# Multisample CFA (by Locale)

```{r cfaByLocale}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true

fit.config.cur <- cfa(Cur.model, 
                      data = df.fin, 
                      group="Locale")
fit.config.new <- cfa(New.model, 
                      data=df.fin, 
                      group="Locale")
fit.weak.cur <- cfa(Cur.model, 
                    data = df.fin, 
                    group="Locale", 
                    group.equal="loadings")
fit.weak.new <- cfa(New.model, 
                    data=df.fin, 
                    group="Locale", 
                    group.equal="loadings")
fit.strong.cur <- cfa(Cur.model, 
                      data = df.fin, 
                      group="Locale", 
                      group.equal=c("loadings","intercepts"))
fit.strong.new <- cfa(New.model, 
                    data=df.fin, 
                    group="Locale", 
                    group.equal=c("loadings","intercepts"))


#fit.partial.new <- cfa(New.model, 
#                    data=df.fin, 
#                    group="Locale", 
#                    group.equal="loadings"),
#                    group.partial = c("op", "st"))
knitr::kable(as.data.frame(table(df.fin$Locale)))

```

## Previous vs. New Model (Locale; Fit Statistics)

The table below shows us the fit statistics for the Previous and new models across the three types of models (configural, metric, and scalar constraints) by locale.  Our results here indicate several things.  First, the new model consistently outperforms the Previous measurement model.  Every model specifying only 3 indicators for each of the four factors fit well and fit better than the more complicated model with 4 indicators per factor.  Second, the metric invariance, new model performed best across Locale.  This second point we shall return to after we see the results from the other multisample analyses.  

```{r CvsNfitLocale}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
Constraints <- c("Configural", "Configural", "Metric", "Metric", "Scalar", "Scalar")
Model <- c("Previous", "New", "Previous", "New", "Previous", "New")

tabLocale <- round(rbind(fitMeasures(fit.config.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.config.new, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.weak.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.weak.new, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.strong.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.strong.new, c("cfi","rmsea","srmr","bic"))),3)
colnames(tabLocale) <- c("CFI", "RMSEA", "SRMR", "BIC")

#tabLocale <- cbind(Constraints, Model, tabLocale)
tabLoc <- data.frame(Model, Constraints, tabLocale)
#knitr::kable(tabLocale, caption = "Fit Statistics by Locale")

library(gt)
tabLoc %>%
  arrange(Model) %>%
  select(Model, Constraints, CFI, RMSEA, SRMR, BIC) %>%
  gt() %>%
  tab_header(
    title = "Fit Statistics by Locale"
  ) %>%
  fmt_number(
    columns = c(CFI, RMSEA, SRMR, BIC),
    decimals = 3
  )

library(flextable)
tabLoc %>%
  arrange(Model) %>%
  filter(Model == "New") %>%
  select(Model, Constraints, CFI, RMSEA, SRMR, BIC) %>%
  flextable() 

```
## Compare Constraints (Locale)

### Previous Model

These model comparisons must be conducted **between** constraints but **within** models.  Thus, the results for our _Previous_ model across the three types of constraints are as follows:

```{r CompConstraintPreviousByLocale}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
kable(lavTestLRT(fit.config.cur, 
                 fit.weak.cur, 
                 fit.strong.cur))
```
### New Model

The results for our _New_ model across the three types of constraints are as follows:

```{r CompConstraintNewByLocale}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true

# compare configural, metric, and scalar models
kable(lavTestLRT(fit.config.new, 
                 fit.weak.new, 
                 fit.strong.new))
```
The new model fits better than the previous model; the Metric invariance model fits best for New model.

## CFA Summary by Locale

The Metric invariance models fit best for both the Previous (old) and new models. Given the relative fit statistics between models, we will proceed with the Metric invariance model for the new model.  The table below shows the mean standardized factor loadings across Locale for the new model.  The mean standardized factor loadings are all above .70, which is a good sign.  The standard deviations of the factor loadings are also relatively low, which is also a good sign.  The mean standard error of the factor loadings is also relatively low, which is also a good sign.  These results suggest that the factor loadings are relatively consistent across Locale.

```{r cfaSummaryLocale}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
library(broom)
tidy(fit.weak.new) %>%
  filter(str_detect(op, "=~")) %>%
  group_by(term) %>%
  summarize(BetaMean = round(mean(std.all),2), 
            BetaSD = round(sd(std.all),2), 
            SEMean = round(mean(std.error),2)) %>%
  kable(caption = "Mean Standardized Factor Loadings across Locale (New Model)")

localeLoadings <- tidy(fit.weak.new) %>%
  filter(str_detect(op, "=~")) %>%
  group_by(term) %>%
  summarize(BetaMean = round(mean(std.all),2), 
            BetaSD = round(sd(std.all),2), 
            SEMean = round(mean(std.error),2))
```

# Multisample CFA (by Age Group)

```{r cfaByAge}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true

fit.conf.age.cur <- cfa(Cur.model,
                    data=df.fin,
                    group="Age.Group")

fit.conf.age.new <- cfa(New.model,
                    data=df.fin,
                    group="Age.Group")

fit.weak.age.cur <- cfa(Cur.model,
                    data=df.fin,
                    group="Age.Group",
                    group.equal = c("loadings"))

fit.weak.age.new <- cfa(New.model,
                    data=df.fin,
                    group="Age.Group",
                    group.equal = c("loadings"))

fit.strong.age.cur <- cfa(Cur.model,
                    data=df.fin,
                    group="Age.Group",
                    group.equal = c("loadings","intercepts"))

fit.strong.age.new <- cfa(New.model,
                    data=df.fin,
                    group="Age.Group",
                    group.equal = c("loadings","intercepts"))
knitr::kable(as.data.frame(table(df.fin$Age.Group)))
```


## Previous vs. New Model (Age; Fit Statistics)

```{r CvsNfitAge}
#| echo: false
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
Constraints <- c("Configural", "Configural", "Metric", "Metric", "Scalar", "Scalar")
Model <- c("Previous", "New", "Previous", "New", "Previous", "New")

tabAge <- round(rbind(fitMeasures(fit.conf.age.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.conf.age.new, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.weak.age.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.weak.age.new, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.strong.age.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.strong.age.new, c("cfi","rmsea","srmr","bic"))),3)
colnames(tabAge) <- c("CFI", "RMSEA", "SRMR", "BIC")
tabAge <- data.frame(Model, Constraints, tabAge)
knitr::kable(tabAge, caption = "Fit Statistics by Age Group")
```

## Compare Constraints (Age Group)

### Previous Model

```{r CompareConstraintsAgeCur}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
kable(lavTestLRT(fit.conf.age.cur, 
                 fit.weak.age.cur, 
                 fit.strong.age.cur))
```

### New Model

```{r CompareConstraintsAgeNew}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
kable(lavTestLRT(fit.conf.age.new, 
                 fit.weak.age.new, 
                 fit.strong.age.new))
```

## CFA Summary by Age Group

```{r cfaSummaryAge}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
byAge.cfa.cur <- as.data.frame(round(cbind(fitmeasures(fit.conf.age.cur),                                                       fitmeasures(fit.weak.age.cur),
                                           fitmeasures(fit.strong.age.cur)),3))
byAge.cfa.new <- as.data.frame(round(cbind(fitmeasures(fit.conf.age.new),
                                           fitmeasures(fit.weak.age.new),
                                           fitmeasures(fit.strong.age.new)),3))
names(byAge.cfa.cur) <- c("configural","metric","scalar")
names(byAge.cfa.new) <- c("configural","metric","scalar")
kable(byAge.cfa.cur, 
      caption = "Fit Statistics by Age Group (Previous Model)")
kable(byAge.cfa.new,
      caption = "Fit Statistics by Age Group (New Model)")
```


### Average Standardized Factor Loadings by Age

```{r cfaSummaryAgeLoadings}
tidy(fit.strong.age.new) %>%
  filter(str_detect(op, "=~")) %>%
  group_by(term) %>%
  summarize(BetaMean = round(mean(std.all),2), 
            BetaSD = round(sd(std.all),2), 
            SEMean = round(mean(std.error),2)) %>%
  kable(caption = "Mean Standardized Factor Loadings across Age (New Model)")

ageLoadings <- tidy(fit.strong.age.new) %>%
  filter(str_detect(op, "=~")) %>%
  group_by(term) %>%
  summarize(BetaMean = round(mean(std.all),2), 
            BetaSD = round(sd(std.all),2), 
            SEMean = round(mean(std.error),2))

```

# Multisample CFA (By Sex)

```{r cfaBySex}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true

df.fin$Gender <- as.factor(df.fin$Gender)
df.sex <- df.fin[df.fin$Gender != "",]
fit.conf.sex.cur <- cfa(Cur.model,
                    data=df.sex,
                    group="Gender")

fit.conf.sex.new <- cfa(New.model,
                    data=df.sex,
                    group="Gender")

fit.weak.sex.cur <- cfa(Cur.model,
                    data=df.sex,
                    group="Gender",
                    group.equal = c("loadings"))

fit.weak.sex.new <- cfa(New.model,
                    data=df.sex,
                    group="Gender",
                    group.equal = c("loadings"))

fit.strong.sex.cur <- cfa(Cur.model,
                    data=df.sex,
                    group="Gender",
                    group.equal = c("loadings","intercepts"))

fit.strong.sex.new <- cfa(New.model,
                    data=df.sex,
                    group="Gender",
                    group.equal = c("loadings","intercepts"))
kable(table(df.fin$Gender), caption = "Frequency by Gender")
```


## Previous vs. New Model (Gender; Fit Statistics)

```{r CvsNfitGender}
#| echo: false
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
Constraints <- c("Configural", "Configural", "Metric", "Metric", "Scalar", "Scalar")
Model <- c("Previous", "New", "Previous", "New", "Previous", "New")

tabGender <- round(rbind(fitMeasures(fit.conf.sex.cur, c("cfi","rmsea","srmr", "bic")),
      fitMeasures(fit.conf.sex.new, c("cfi","rmsea","srmr", "bic")),
      fitMeasures(fit.weak.sex.cur, c("cfi","rmsea","srmr","bic")),
      fitMeasures(fit.weak.sex.new, c("cfi","rmsea","srmr", "bic")),
      fitMeasures(fit.strong.sex.cur, c("cfi","rmsea","srmr", "bic")),
      fitMeasures(fit.strong.sex.new, c("cfi","rmsea","srmr", "bic"))),3)
colnames(tabGender) <- c("CFI", "RMSEA", "SRMR", "BIC")
tabGender <- data.frame(Model, Constraints, tabGender)
knitr::kable(tabGender, caption = "Fit Statistics by Age Group")
```

## Compare Constraints (Sex)

### Previous Model

```{r CompareConstraintsSexCur}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
kable(lavTestLRT(fit.conf.sex.cur, 
                 fit.weak.sex.cur, 
                 fit.strong.sex.cur))
```

### New Model

```{r CompareConstraintsSexNew}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
kable(lavTestLRT(fit.conf.sex.new, 
                 fit.weak.sex.new, 
                 fit.strong.sex.new))
```

## CFA Summary by Sex

```{r cfaSummarySex}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: false
bySex.cfa.cur <- as.data.frame(round(cbind(fitmeasures(fit.conf.sex.cur),
                                           fitmeasures(fit.weak.sex.cur),
                                        fitmeasures(fit.strong.sex.cur)),3))
bySex.cfa.new <- as.data.frame(round(cbind(fitmeasures(fit.conf.sex.new),
                                           fitmeasures(fit.weak.sex.new),
                                        fitmeasures(fit.strong.sex.new)),3))
names(bySex.cfa.cur) <- c("configural","metric","scalar")
names(bySex.cfa.new) <- c("configural","metric","scalar")
kable(bySex.cfa.cur)
kable(bySex.cfa.new)
```

### Average Standardized Factor Load

```{r cfaSummarySexLoadings}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: false

tidy(fit.strong.sex.new) %>%
  filter(str_detect(op, "=~")) %>%
  group_by(term) %>%
  summarize(BetaMean = round(mean(std.all),2), 
            BetaSD = round(sd(std.all),2), 
            SEMean = round(mean(std.error),2)) %>%
  kable(caption = "Mean Standardized Factor Loadings across Gender (New Model)")

sexLoadings <- tidy(fit.strong.sex.new) %>%
  filter(str_detect(op, "=~")) %>%
  group_by(term) %>%
  summarize(BetaMean = round(mean(std.all),2), 
            BetaSD = round(sd(std.all),2), 
            SEMean = round(mean(std.error),2))
# stored for later use.

```


# CFA Results Entire Sample

We ran the models for the entire dataset without regard to any classification of the participants (i.e., locale, age group, etc.). The results are as follows:

```{r AllSampleCFA}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true
# New model (3 mv for 4 factors) but all of the data unconditioned by group
fit.Cur.ALL <- cfa(Cur.model, data=df.fin)
fit.New.ALL <- cfa(New.model, data=df.fin)

HOF.Cur.model <-  'ds =~ Q1 + Q2 + Q3 + Q4
                  je =~ Q5 + Q6 + Q7 + Q8
                  st =~ Q9 + Q10 + Q11 + Q12
                  op =~ Q13 + Q14 + Q15 + Q16
                  wpCur =~ ds + je + st + op'

HOF.New.model <- 'ds =~ Q1 + Q3 + Q4
                  je =~ Q6 + Q7 + Q8
                  st =~ Q10 + Q11 + Q12
                  op =~ Q13 + Q14 + Q15
                  wpCur =~ ds + je + st + op'

HOF2.New.model <- 'ds =~ Q1 + Q3 + Q4
                  je =~ Q6 + Q7 + Q8
                  st =~ Q10 + Q11 + Q12
                  op =~ Q13 + Q14 + Q15
                  Fdsjest =~ ds + je + st'

HOF3.New.model <- 'dim1 =~ Q13 + Q14 + Q15
                  dim2 =~ Q1 + Q3 + Q4 + Q10 + Q11 + Q12
                  dim3 =~ Q6 + Q7 + Q8
                  wpCurRes =~ dim1 + dim2 + dim3'

# fit the higher order factor model - same as the "new" model but with a higher order factor included now
fit.HOF.cur <- cfa(HOF.Cur.model, data=df.fin)
fit.HOF.new <- cfa(HOF.New.model, data=df.fin)
fit.HOF2.new <- cfa(HOF2.New.model, data=df.fin)
fit.HOF3.new <- cfa(HOF3.New.model, data=df.fin)
# the last one was based upon the residual analysis of the Rasch model below.  Just testing alternative models.


allModelsFit <- as.data.frame(round(
  cbind(Cur=fitmeasures(fit.Cur.ALL),
        CurHOF=fitmeasures(fit.HOF.cur),
        New=fitmeasures(fit.New.ALL),
        NewHOF=fitmeasures(fit.HOF.new),
        NewHOF2=fitmeasures(fit.HOF2.new)),2))
kable(allModelsFit[c("cfi","tli","rmsea","srmr"),])
```

```{r PreviousVsNewComps}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| cache: true


anova(fit.Cur.ALL,fit.HOF.cur,fit.New.ALL, fit.HOF.new, fit.HOF2.new, fit.HOF3.new)

pl1 <- lavaanPlot(fit.New.ALL, coefs=TRUE, stand=TRUE)
save_png(pl1, "CFA_NewModel.png")
#embed_plot_pdf(pl1, file = "CFA_NewModel.pdf")
#tidySEM::graph_sem(fit.HOF.new, coefs=TRUE, stand=TRUE)
```

Evidence from this comparison shows that the higher order factor (HOF) models do not fit as well as the four-factor solution with only 3 indicators per factor (New). While the correlations between the lower order factors remained high across all models, the HOF model does not provide a better fit to the data. Our current evidence suggests a higher order factor but the model is not sufficiently better than the lower-order factor model.  We may find that an overall or total score for curiosity leads to reasonable outcomes and conclusions; the current evidence does not support this conclusion.

![Model on ALL data](CFA_NewModel.png){fig-align="center"}

## Factor Loadings (Entire Sample)

The factor loadings for the new model are as follows:

```{r cfaSummaryAllLoadings}

allLoadings <- tidy(fit.New.ALL) %>%
  filter(str_detect(op, "=~")) %>%
  select(term, std.all, std.error)

allLoadings %>%
  mutate(across(where(is.numeric), round, 2)) %>%
  apa("Factor Loadings for the New Model (Entire Sample)")

allOldLoadings <- tidy(fit.Cur.ALL) %>%
  filter(str_detect(op, "=~")) %>%
  select(term, std.all, std.error)

allOldLoadings %>%
  mutate(across(where(is.numeric), round, 2)) %>%
  apa("Factor Loadings for the Previous Model (Entire Sample)")

```

## CFA Factor Loadings by Locale, Age Group, and Sex

Below are the average factor loadings by locale, age group, and sex.  Notice that they are all relatively similar.  The average factor loadings are all above 0.5, which is a good sign that the items are measuring the factors well.  The standard deviations are also relatively low, which is also a good sign that the items are measuring the factors well.

```{r cfaSummary}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| eval: true
#| cache: true

# Average factor loadings by locale, age group, and sex combined
inner_join(localeLoadings, ageLoadings, by = "term") %>%
  inner_join(sexLoadings, by = "term") %>%
  kable(caption = "Average Factor Loadings by Locale, Age Group, and Sex")

cfaMSloads <- inner_join(localeLoadings, ageLoadings, by = "term") %>%
  inner_join(sexLoadings, by = "term") %>%
  mutate(across(where(is.numeric), round, 2))

#  select(term, std.all.x, std.all.y, std.all) %>%
#  rename("Locale" = std.all.x, "Age"

```



# EXPLORATORY ANALYSES - APPENDIX MATERIAL

# EFA models

To supplement and potentially test for the robustness of the CFA results, we ran two EFA models - the Previous and new model items.  The results are as follows:

## EFA Model - ALL ITEMS (Previous Model)

```{r efa1}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| cache: true
efa1 <- fa(df.fin[,c(2:17)], nfactors = 4, rotate = "varimax", fm = "pa")
efa1
```

## EFA Model - SELECTED ITEMS (New Model)

```{r efa2}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| cache: true
efa2 <- fa(df.fin[,c(2,4,5,7,8,9,11:16)], nfactors = 4, rotate = "varimax", fm = "pa")
efa2
```

## EFA Omega model - SELECTED ITEMS (New Model)

```{r efa3}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| cache: true
efa3 <- fa(df.fin[,c(2,4,5,7,8,9,11:16)], nfactors = 4, rotate = "oblimin", fm = "omega")
efa3
plot(efa3)
```


# Factor Mean Comparisons

```{r EstimateFactorScores}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| cache: true
df.fin$ds4sum <- rowSums(df.fin[,c("Q1","Q2","Q3","Q4")])
df.fin$je4sum <- rowSums(df.fin[,c("Q5","Q6","Q7","Q8")])
df.fin$st4sum <- rowSums(df.fin[,c("Q9","Q10","Q11","Q12")])
df.fin$op4sum <- rowSums(df.fin[,c("Q13","Q14","Q15","Q16")])

df.fin$ds3sum <- rowSums(df.fin[,c("Q1","Q3","Q4")])
df.fin$je3sum <- rowSums(df.fin[,c("Q6","Q7","Q8")])
df.fin$st3sum <- rowSums(df.fin[,c("Q10","Q11","Q12")])
df.fin$op3sum <- rowSums(df.fin[,c("Q13","Q14","Q15")])

# factor scores for the entire sample
cur.ALL.scores <- cbind(df.fin,lavPredict(fit.Cur.ALL, df.fin, type = "lv"))
new.ALL.scores <- cbind(df.fin,lavPredict(fit.New.ALL, df.fin, type = "lv"))
kable(head(new.ALL.scores))
```

## Factor Score Computation Comparison

```{r FactorScoreComparison}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| cache: true
corCFAfscores <- cor(new.ALL.scores[,c("ds","je","st","op","ds3sum","je3sum","st3sum","op3sum")], use = "pairwise.complete.obs")
#round(corCFAfscores,2)
ggcorrplot(corCFAfscores, type = "lower", method="circle", lab = TRUE, title = "Correlation Matrix of Factor and Sum Scores (CFA)")

corSumScores <- cor(new.ALL.scores[,c("ds3sum","je3sum","st3sum","op3sum")], use = "pairwise.complete.obs")
#round(corCFAfscores,2)
ggcorrplot(corSumScores, type = "lower", method="circle", lab = TRUE, title = "Correlation Matrix of Sum Scores (CFA)")

corFscores <- cor(new.ALL.scores[,c("ds","je","st","op")], use = "pairwise.complete.obs")
#round(corCFAfscores,2)
ggcorrplot(corFscores, type = "lower", method="circle", lab = TRUE, title = "Correlation Matrix of Factor Scores (CFA)")

```
## Factor Sum Score Bivariate Correlations

Never interpret a correlation without plotting the bivariate relationship.  Below are the bivariate correlations for the sum scores of the factors.  The correlations are all positive and significantly different from zero.  Our concern was that the intercorrelations were so high that a higher order factor might fit the data better.  We tested that proposition earlier and found that the four factor solution fit best.

```{r}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| cache: true
# plot bivariate correlations for ds3sum, je3sum, st3sum, and op3sum

pairs.panels(new.ALL.scores[,c("ds3sum","je3sum","st3sum","op3sum")], 
             method = "pearson", 
             hist.col = "lightblue", 
             density = TRUE, 
             ellipses = TRUE, 
             col = "blue", 
             pch = 21, 
             bg = "lightblue", 
             cex = 0.7)

new.ALL.scores[,c("ds3sum","je3sum","st3sum","op3sum")] %>% 
  correlate() %>%
  network_plot(min_cor = .3)


```

## Correlation Matrix Between Items

Give readers a clear picture of the inter-item correlations.  These figures (like the one below) are simple methods to compare inter- and intra- item correlations.  If there are, you might want to consider dropping them from the scale.  If you do, you should re-run the EFA to see if the factor structure changes.

```{r corItems}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

corItems <- cor(df.fin[,c("Q1","Q3","Q4","Q6","Q7","Q8","Q10","Q11","Q12","Q13","Q14","Q15")], use = "pairwise.complete.obs")

corItems.plot <- ggcorrplot(corItems, type = "lower", 
           method="circle", 
           lab = T, 
           title = "",
           show.legend = F,
           sig.level = .0004,
           insig = "blank") + 
  xlab("Item") +
  ylab("Item") +
  annotate(geom="polygon", 
           x=c(0,2.5,2.5),
           y=c(.5,3,.5), 
           fill="blue", 
           alpha=0.3) +
  annotate(geom="polygon", 
           x=c(3,5.5,5.5),
           y=c(3.5,6,3.5), 
           fill="blue", 
           alpha=0.3) +
  annotate(geom="polygon",
           x=c(6,8.5,8.5),
           y=c(6.5,9,6.5), 
           fill="blue", 
           alpha=0.3) +
  annotate(geom="polygon",
           x=c(9,11.5,11.5),
           y=c(9.5,12,9.5), 
           fill="blue", 
           alpha=0.3) +
  annotate(geom="text",
           x=1,
           y=2.25,
           label="DS",
           size = 5) +
  annotate(geom="text",
           x=4,
           y=5.25,
           label="JE",
           size = 5) +
  annotate(geom="text",
           x=7,
           y=8.25,
           label="ST",
           size = 5) +
  annotate(geom="text",
           x=10,
           y=11.25,
           label="OP",
           size = 5)
```
Some items stand out with higher inter-item correlations.  For example, Q4 (DS) and Q8 (JE) correlate 0.48.  The items read:

**Q4:**  I work relentlessly to find answers to complicated questions at work.\
**Q8:**  I seek out work tasks where I will have to think in depth about something.

Both questions ask the respondent to think deeply about their work and their work ethic.  These items are likely multidimensional - measuring the same and yet different constructs simultaneously.

::: {.callout-tip}
**Multidimensionality** is a common problem in scale development.  It is often the case that items are measuring the same construct but are multidimensional.  This is a problem because it can lead to biased estimates of the factor loadings and the factor structure.  We will test for this in the next section.

Hypothesis:  If work ethic is an important piece that holds these items together, then we ought to see higher endorsements from locations where work ethic is valued in society.  
:::

Compared to the correlations among Q3, Q4 and Q6, Q7 and Q8, and Q10 and Q11.  These items are likely measuring the same construct.  We will test this hypothesis in the next section.

## Group Comparisons

Finally, we compared the mean differences across the three factors - Locale, Age Group, and Gender.  The results are as follows:

### Group by Locale

```{r FactorComparisonsLoc}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

new.ALL.scores$Locale <- as.factor(new.ALL.scores$Locale)

# For Factor Scores as Computed by CFA in lavaan
lmDS.loc <- new.ALL.scores %>% 
  dplyr::as_tibble() %>%
  lm(ds ~ Locale, 
     data = .,
     contrasts = list(Locale = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach() #%>%
  #tbl_regression()

lmJE.loc <- new.ALL.scores %>% 
  dplyr::as_tibble() %>%
  lm(je ~ Locale, 
     data = .,
     contrasts = list(Locale = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

lmST.loc <- new.ALL.scores %>%
  dplyr::as_tibble() %>%
  lm(st ~ Locale, 
     data = .,
     contrasts = list(Locale = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

lmOP.loc <- new.ALL.scores %>%
  dplyr::as_tibble() %>%
  lm(op ~ Locale, 
     data = .,
     contrasts = list(Locale = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

tbl_merge(tbls = list(lmDS.loc, lmJE.loc, lmST.loc, lmOP.loc),
          tab_spanner = c("DS","JE","ST","OP")) %>%
  modify_header(label = "Factor Scores by Locale") %>%
  modify_footnote(label = "Note: Factor scores are computed using the CFA model.  US is the reference group with effects coding.")

locMC <- tbl_merge(tbls = list(lmDS.loc, lmJE.loc, lmST.loc, lmOP.loc),
          tab_spanner = c("DS","JE","ST","OP")) %>%
  modify_header(label = "Factor Scores by Locale") %>%
  modify_footnote(label = "Note: Factor scores are computed using the CFA model.  US is the reference group with effects coding.")


  
new.ALL.scores %>%
  pivot_longer(cols = c(ds,je,st,op), 
               names_to = "Factor", 
               values_to = "FactorScore") %>%
  ggplot(aes(x = Locale, 
             y = FactorScore, 
             fill = Factor)) +
  geom_boxplot()

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, st3sum, op3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = Locale, 
             y = SumScore, 
             fill = Factor)) +
  geom_boxplot() +
  ylim(3,15)

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, st3sum, op3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  # recode Factor to be more descriptive
  mutate(Factor = recode(Factor, 
                         ds3sum = "Deprivation Sensitivity", 
                         je3sum = "Joyous Exploration", 
                         st3sum = "Stress Tolerance", 
                         op3sum = "Open to Other")) %>%
  ggplot(aes(x = Factor, 
             y = SumScore, 
             fill = Locale)) +
  geom_boxplot() +
  ylim(3,15)


```
The figure above shows the relative differences by curiosity factor score by locale.  For a closer inspection, let's break out each of the factor scores and compare density plots.

```{r}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

new.ALL.scores %>%
  pivot_longer(cols = c(ds,je,st,op), 
               names_to = "Factor", 
               values_to = "FactorScore") %>%
  ggplot(aes(x = FactorScore, 
             fill = Locale)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Factor Scores by Locale")
```

Those factor scores are pretty close.  Let's look at the computed scores instead of the factor scores.

```{r}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, st3sum, op3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = SumScore, 
             fill = Locale)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Sum Scores by Locale")
```

Now I am curious.  These differences are really small but the areas under the curve at the extremes are really quite different.  I recall Lee's paper about the differences in the tails of the distribution.  I wonder if that is what is happening here.  I will have to look into that.

```{r}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, st3sum, op3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = SumScore, 
             fill = Locale)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Sum Scores by Locale") +
  xlim(3,15)

# show density plot for ds3sum by locale
new.ALL.scores %>%
  ggplot(aes(x = ds3sum, 
             fill = Locale)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of DS3SUM by Locale") +
  xlim(3,15)

```

##### Deprivation Sensitivity By Locale

```{r DS3SUM}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

## DS3SUM

new.ALL.scores %>%
  group_by(Locale) %>%
  summarize(Count12 = sum(ds3sum > 12),
            Prop12 = Count12/n(),
            Count8 = sum(ds3sum < 9),
            Prop8 = Count8/n()) %>%
  mutate(Odds12 = Prop12/(1-Prop12),
         Odds8 = Prop8/(1-Prop8),
         OddsRatio = Odds12/Odds8,
         logOR = log(OddsRatio)) %>%
  rename("Count > 12" = Count12,
         "Prop > 12" = Prop12,
         "Count < 9" = Count8,
         "Prop < 9" = Prop8,
         "Odds > 12" = Odds12,
         "Odds < 9" = Odds8,
         "Odds Ratio" = OddsRatio,
         "log Odds Ratio" = logOR) %>%
  select(Locale, "Count > 12", "Prop > 12", "Count < 9", "Prop < 9", "Odds > 12", "Odds < 9", "Odds Ratio", "log Odds Ratio") %>%
  knitr::kable(digits = 3)
```

##### Joyous Exploration By Locale

```{r JE3SUM}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

## JE3SUM

new.ALL.scores %>%
  group_by(Locale) %>%
  summarize(Count12 = sum(je3sum > 12),
            Prop12 = Count12/n(),
            Count8 = sum(je3sum < 9),
            Prop8 = Count8/n()) %>%
  mutate(Odds12 = Prop12/(1-Prop12),
         Odds8 = Prop8/(1-Prop8),
         OddsRatio = Odds12/Odds8,
         logOR = log(OddsRatio)) %>%
  rename("Count > 12" = Count12,
         "Prop > 12" = Prop12,
         "Count < 9" = Count8,
         "Prop < 9" = Prop8,
         "Odds > 12" = Odds12,
         "Odds < 9" = Odds8,
         "Odds Ratio" = OddsRatio,
         "log Odds Ratio" = logOR) %>%
  select(Locale, "Count > 12", "Prop > 12", "Count < 9", "Prop < 9", "Odds > 12", "Odds < 9", "Odds Ratio", "log Odds Ratio") %>%
  knitr::kable(digits = 3)
```

##### Stress Tolerance By Locale

```{r ST3SUM}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

## ST3SUM

new.ALL.scores %>%
  group_by(Locale) %>%
  summarize(Count12 = sum(st3sum > 12),
            Prop12 = Count12/n(),
            Count8 = sum(st3sum < 9),
            Prop8 = Count8/n()) %>%
  mutate(Odds12 = Prop12/(1-Prop12),
         Odds8 = Prop8/(1-Prop8),
         OddsRatio = Odds12/Odds8,
         logOR = log(OddsRatio)) %>%
  rename("Count > 12" = Count12,
         "Prop > 12" = Prop12,
         "Count < 9" = Count8,
         "Prop < 9" = Prop8,
         "Odds > 12" = Odds12,
         "Odds < 9" = Odds8,
         "Odds Ratio" = OddsRatio,
         "log Odds Ratio" = logOR) %>%
  select(Locale, "Count > 12", "Prop > 12", "Count < 9", "Prop < 9", "Odds > 12", "Odds < 9", "Odds Ratio", "log Odds Ratio") %>%
  knitr::kable(digits = 3)

```

##### Openness to Other's Ideas By Locale

```{r OP3SUM}

## OP3SUM

new.ALL.scores %>%
  group_by(Locale) %>%
  summarize(Count12 = sum(op3sum > 12),
            Prop12 = Count12/n(),
            Count8 = sum(op3sum < 9),
            Prop8 = Count8/n()) %>%
  mutate(Odds12 = Prop12/(1-Prop12),
         Odds8 = Prop8/(1-Prop8),
         OddsRatio = Odds12/Odds8,
         logOR = log(OddsRatio)) %>%
  rename("Count > 12" = Count12,
         "Prop > 12" = Prop12,
         "Count < 9" = Count8,
         "Prop < 9" = Prop8,
         "Odds > 12" = Odds12,
         "Odds < 9" = Odds8,
         "Odds Ratio" = OddsRatio,
         "log Odds Ratio" = logOR) %>%
  select(Locale, "Count > 12", "Prop > 12", "Count < 9", "Prop < 9", "Odds > 12", "Odds < 9", "Odds Ratio", "log Odds Ratio") %>%
  knitr::kable(digits = 3)

```


### Group by Age

```{r FactorComparisonsAge}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true

new.ALL.scores$Age.Group <- as.factor(new.ALL.scores$Age.Group)

# For Factor Scores as Computed by CFA in lavaan
lmDS.age <- new.ALL.scores %>% 
  dplyr::as_tibble() %>%
  lm(ds ~ Age.Group, 
     data = .,
     contrasts = list(Age.Group = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach() #%>%
  #tbl_regression()

lmJE.age <- new.ALL.scores %>% 
  dplyr::as_tibble() %>%
  lm(je ~ Age.Group, 
     data = .,
     contrasts = list(Age.Group = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

lmST.age <- new.ALL.scores %>%
  dplyr::as_tibble() %>%
  lm(st ~ Age.Group, 
     data = .,
     contrasts = list(Age.Group = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

lmOP.age <- new.ALL.scores %>%
  dplyr::as_tibble() %>%
  lm(op ~ Age.Group, 
     data = .,
     contrasts = list(Age.Group = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

tbl_merge(tbls = list(lmDS.age, lmJE.age, lmOP.age,lmST.age),
          tab_spanner = c("Deprivation Sensitivity","Joyous Exploration","Openness to Others Ideas","Stress Tolerance")) %>%
  modify_header(label = "Factor Scores by Age Group") %>%
  modify_footnote(label = "Note: Factor scores are computed using the CFA model.  Age less than 25 is the reference group.")

new.ALL.scores %>%
  pivot_longer(cols = c(ds,je,op,st), 
               names_to = "Factor", 
               values_to = "FactorScore") %>%
  ggplot(aes(x = Age.Group, 
             y = FactorScore, 
             fill = Factor)) +
  geom_boxplot()

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, op3sum, st3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = Age.Group, 
             y = SumScore, 
             fill = Factor)) +
  geom_boxplot() +
  ylim(3,15)

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, op3sum, st3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  # recode Factor to be more descriptive
  mutate(Factor = recode(Factor, 
                         ds3sum = "Deprivation Sensitivity", 
                         je3sum = "Joyous Exploration", 
                         op3sum = "Open to Other",
                         st3sum = "Stress Tolerance")) %>%
  ggplot(aes(x = Factor, 
             y = SumScore, 
             fill = Age.Group)) +
  geom_boxplot() +
  ylim(3,15) +
  theme_bw()

```

#### Density Plots

```{r DensityPlotsAge}
# density plots
new.ALL.scores %>%
  pivot_longer(cols = c(ds, je, op, st), 
               names_to = "Factor", 
               values_to = "FactorScore") %>%
  ggplot(aes(x = FactorScore, 
             fill = Age.Group)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Factor Scores by Age Group")

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, op3sum, st3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = SumScore, 
             fill = Age.Group)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Sum Scores by Age Group")

```

### Group by Sex

```{r FactorComparisonsSex}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
new.ALL.scores$Gender <- as.factor(new.ALL.scores$Gender)

# For Factor Scores as Computed by CFA in lavaan
lmDS.sex <- new.ALL.scores %>% 
  dplyr::as_tibble() %>%
  lm(ds ~ Gender, 
     data = .,
     contrasts = list(Gender = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach() #%>%
  #tbl_regression()

lmJE.sex <- new.ALL.scores %>% 
  dplyr::as_tibble() %>%
  lm(je ~ Gender, 
     data = .,
     contrasts = list(Gender = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

lmST.sex <- new.ALL.scores %>%
  dplyr::as_tibble() %>%
  lm(st ~ Gender, 
     data = .,
     contrasts = list(Gender = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

lmOP.sex <- new.ALL.scores %>%
  dplyr::as_tibble() %>%
  lm(op ~ Gender, 
     data = .,
     contrasts = list(Gender = contr.sum)) %>%
  tbl_regression()
  #tidy_and_attach()

tbl_merge(tbls = list(lmDS.sex, lmJE.sex, lmOP.sex, lmST.sex),
          tab_spanner = c("Deprivation Sensitivity","Joyous Exploration","Openness to Others Ideas","Stress Tolerance")) %>%
  modify_header(label = "Factor Scores by Sex") %>%
  modify_footnote(label = "Note: Factor scores are computed using the CFA model.  Male is the reference group.")

new.ALL.scores %>%
  pivot_longer(cols = c(ds,je,op,st), 
               names_to = "Factor", 
               values_to = "FactorScore") %>%
  ggplot(aes(x = Gender, 
             y = FactorScore, 
             fill = Factor)) +
  geom_boxplot()

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, op3sum, st3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = Gender, 
             y = SumScore, 
             fill = Factor)) +
  geom_boxplot() +
  ylim(3,15)

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, op3sum, st3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  # recode Factor to be more descriptive
  mutate(Factor = recode(Factor, 
                         ds3sum = "Deprivation Sensitivity", 
                         je3sum = "Joyous Exploration",
                         op3sum = "Open to Other",
                         st3sum = "Stress Tolerance")) %>%
  ggplot(aes(x = Factor, 
             y = SumScore, 
             fill = Gender)) +
  geom_boxplot() +
  ylim(3,15) +
  theme_bw()
```

```{r DensityPlotsSex}
# plot density by sex for each factor score

# density plots
new.ALL.scores %>%
  pivot_longer(cols = c(ds,je,op, st), 
               names_to = "Factor", 
               values_to = "FactorScore") %>%
  ggplot(aes(x = FactorScore, 
             fill = Gender)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Factor Scores by Sex")

new.ALL.scores %>%
  pivot_longer(cols = c(ds3sum, je3sum, op3sum, st3sum), 
               names_to = "Factor", 
               values_to = "SumScore") %>%
  ggplot(aes(x = SumScore, 
             fill = Gender)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Factor, scales = "free") +
  labs(title = "Density Plot of Sum Scores by Sex")
```

# Rasch Model Anyone?

```{r RaschModel}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
#| output: false

# Rasch Model
library(TAM)
rDat <- new.ALL.scores[,c(2,4,5,7,8,9,11:16)] 
rOut <- TAM::tam(rDat)
```

  
```{r RaschSummary}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
summary(rOut)
```
  
```{r ICCPlots}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
plot(rOut)
```

## Rasch Residuals

```{r RaschResiduals}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| eval: true
#| include: true
raschResid <- as.data.frame(IRT.residuals(rOut)$residuals)

# PCA residuals
#raschResid %>%

pcaOut <- PCA(raschResid, graph = F)
get_pca_var(pcaOut)$cos2 %>%
  corrplot::corrplot(is.cor = F)

fviz_eig(pcaOut)

fviz_pca(pcaOut)

```


# FINAL RESULTS REPORT

## Results: Stage 1

The results of the CFA models are summarized in the following tables. The first table provides the fit statistics for New and Previous models across the entire sample (later) and the MS models. The second table provides the results of the likelihood ratio tests for the constraints.

```{r ResStage1}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| eval: true
#| cache: true

# Fit statistics for New and Previous models across the entire sample and the MS models

allModelsFit <- as.data.frame(round(
  cbind(Cur=fitmeasures(fit.Cur.ALL),
        CurHOF=fitmeasures(fit.HOF.cur),
        New=fitmeasures(fit.New.ALL),
        NewHOF=fitmeasures(fit.HOF.new),
        NewHOF2=fitmeasures(fit.HOF2.new)),2))
```


## Results: Stage 2

The results of the CFA models are summarized in the following tables. The first table provides the fit statistics for New and Previous models across the entire sample (later) and the MS models. The second table provides the results of the likelihood ratio tests for the constraints.

```{r ResStage2}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| eval: true
#| cache: true

# Fit statistics for New and Previous models across the entire sample and the MS models

## these are now embedded into the document.  Please refer to the final submission.

allModelsFit <- as.data.frame(round(
  cbind("Initial: Lower"=fitmeasures(fit.Cur.ALL),
        "Initial: Higher"=fitmeasures(fit.HOF.cur),
        "Revised: Lower"=fitmeasures(fit.New.ALL),
        "Revised: Higher"=fitmeasures(fit.HOF.new)
        ),2))
kable(allModelsFit[c("cfi","tli","rmsea","srmr"),])
```

## Results: Stage 3

```{r ResStage3}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| eval: true
#| cache: true
tabLoc$Facet <- "Locale"
tabAge$Facet <- "Age"
tabGender$Facet <- "Sex"

tabStage3a <- rbind(tabLoc, tabAge, tabGender) %>%
  # filter only the Model == New
  filter(Model == "New") %>%
  # remove the Model column
  select(-Model) %>%
  select(Facet, everything())

tabStage3a %>%
  apa("Table 2\nFit Statistics By Facet and Constraint") # uses gt() package - function from above

tabStage3a %>%
  apa("Table 2\nFit Statistics By Facet and Constraint") %>%
  gt::gtsave("tabStage3.docx")



cfaMSloads %>%
  apa("Full Sample Factor Loadings with Mean Standardized Loadings by Facet") %>%
  gt::gtsave("cfaMSloads.docx")


tmp <- cfaMSloads %>%
  select(term, BetaSD.x, BetaSD.y, BetaSD) %>%
  rename("Locale (SD)" = BetaSD.x,
         "Age (SD)" = BetaSD.y,
         "Sex (SD)" = BetaSD)



allLoads <- allLoadings %>%
  rename("Beta" = std.all,
         "SE" = std.error) %>%
  inner_join(tmp, by = "term") %>%
  mutate(across(where(is.numeric), round, 2))
  
allLoads %>%
  apa("Full Sample Factor Loadings with Mean Standardized Loadings by Facet") %>%
  gt::gtsave("allLoads.docx")

allLoads %>%
  apa("Full Sample Factor Loadings with Mean Standardized Loadings by Facet")



```

## Results: Stage 4

```{r ResStage4}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| eval: true
#| cache: true


locMC <- tbl_merge(tbls = list(lmDS.loc, lmJE.loc, lmOP.loc, lmST.loc),
          tab_spanner = c("Deprivation Sensitivity","Joyous Exploration","Openness to Others Ideas","Stress Tolerance")) %>%
  modify_header(label = "") %>%
  modify_footnote(label = "Note: Factor scores were computed using the CFA model.  US is the reference group with dummy coding.")


locMC %>%
  as_gt() %>%
  gt::gtsave("locMC.docx")

locMC %>%
  as_gt() %>%
  gt::gtsave("locMC.png")

df.fin$Age <- as.factor(df.fin$Age.Group)
df.fin$Sex <- as.factor(df.fin$Gender)



ageMC <- tbl_merge(tbls = list(lmDS.age, lmJE.age, lmOP.age, lmST.age),
          tab_spanner = c("Deprivation Sensitivity","Joyous Exploration","Openness to Others Ideas","Stress Tolerance")) %>%
  modify_header(label = "") %>%
  modify_footnote(label = "Note: Factor scores were computed using the CFA model.  18-24 is the reference group with dummy coding.")

ageMC %>%
  as_gt() %>%
  gt::gtsave("ageMC.docx")

ageMC %>%
  as_gt() %>%
  gt::gtsave("ageMC.png")

sexMC <- tbl_merge(tbls = list(lmDS.sex, lmJE.sex, lmOP.sex, lmST.sex),
          tab_spanner = c("Deprivation Sensitivity","Joyous Exploration","Openness to Others Ideas","Stress Tolerance")) %>%
  modify_header(label = "") %>%
  modify_footnote(label = "Note: Factor scores are computed using the CFA model.  Males are the reference group with effects coding.")

sexMC %>%
  as_gt() %>%
  gt::gtsave("sexMC.docx")

sexMC %>%
  as_gt() %>%
  gt::gtsave("sexMC.png")

# compute Sex differences for the four factors as scored by summing the items for each factor

df.fin %>%
  select(Sex, ds3sum:op3sum) %>%
  pivot_longer(cols = ds3sum:op3sum, names_to = "Factor", values_to = "Sum Scores") %>%
  group_by(Factor, Sex) %>%
  summarise(Mean = mean(`Sum Scores`, na.rm = T), SD = sd(`Sum Scores`, na.rm = T), .groups = "drop") %>%
  mutate(across(where(is.numeric), round, 2)) %>%
  mutate(Factor = recode(Factor, ds3sum = "DS",je3sum = "JE",st3sum = "ST",op3sum = "OP")) %>%
  gt::gt() %>%
  gt::gtsave("sexDiff.docx")

df.fin %>%
  select(Sex, ds3sum:op3sum) %>%
  pivot_longer(cols = ds3sum:op3sum, names_to = "Factor", values_to = "Sum Scores") %>%
  group_by(Factor, Sex) %>%
  summarise(Mean = mean(`Sum Scores`, na.rm = T), SD = sd(`Sum Scores`, na.rm = T), .groups = "drop") %>%
  mutate(across(where(is.numeric), round, 2)) %>%
  mutate(Factor = recode(Factor, ds3sum = "DS",je3sum = "JE",st3sum = "ST",op3sum = "OP")) %>%
  gt::gt() %>%
  gt::gtsave("sexDiff.png")




# run efa on Q25_1:Q25_10

new.ALL.scores$CExpPC1 <- psych::principal(
  df[df$ResponseId 
         %in% new.ALL.scores$ResponseId ,c(25:34)],
  nfactors = 1)$scores

new.ALL.scores$CEnvPC1 <- psych::principal(
  df[df$ResponseId 
         %in% new.ALL.scores$ResponseId ,c(21:24)], 
  nfactors = 1)$scores

new.ALL.scores$DigPC1 <- psych::principal(
  df[df$ResponseId
         %in% new.ALL.scores$ResponseId ,c(35:38)],
  nfactors = 1)$scores

kable(df.varnames[c(25:34), 1:2], col.names = c("Item", "Question"), caption = "Expectation of Curiosity")

kable(df.varnames[c(21:24), 1:2], col.names = c("Item", "Question"), caption = "Environment of Curiosity")

kable(df.varnames[c(35:38), 1:2], col.names = c("Item", "Question"), caption = "Digital Curiosity")



# present figure of correlation matrix between the four curiosity scores and the three PC1 scores from above.

# correlation matrix
corS4 <- cor(new.ALL.scores[,c(25:32)], new.ALL.scores[,c(33:35)], use = "pairwise.complete.obs")
kable(corS4, digits = 2)

corMat <- cor(new.ALL.scores[,c(25:28,33:35)], use = "pairwise.complete.obs")
corMat %>%
  corrplot::corrplot(is.cor = T)


#efaOut
#fa.diagram(efaOut)
#summary(efaOut)

#scores <- efaOut$scores

```

## Revise and Resubmit Material

```{r PAIDRandR}
#| echo: true
#| message: false
#| error: false
#| warning: false
#| include: true
#| eval: true

locLavTest <- lavTestScore(fit.strong.new, standardized = TRUE, epc = TRUE)
loc_parTable <- parTable(fit.strong.new)

#kable(locLavTest, caption = "LavTest for the Location Model")
#kable(loc_parTable, caption = "Parameter Estimate Tests for the Location Model")

ageLavTest <- lavTestScore(fit.strong.age.new, standardized = TRUE, epc = TRUE)
age_parTable <- parTable(fit.strong.age.new)

#kable(ageLavTest, caption = "LavTest for the Age Model")
#kable(age_parTable, caption = "Parameter Estimate Tests for the Age Model")

sexLavTest <- lavTestScore(fit.strong.sex.new, standardized = TRUE, epc = TRUE)
sex_parTable <- parTable(fit.strong.sex.new)

#kable(sexLavTest, caption = "LavTest for the Sex Model")
#kable(sexLavTest, caption = "Parameter Estimate Tests for the Sex Model")

```


# Session Information

```{r}
#| echo: true
#| message: false
#| error: false
#| warning: false
sessionInfo()
```
